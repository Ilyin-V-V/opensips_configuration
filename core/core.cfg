route{
	#Переменные
	$avp(CALLID) = $ci;
	$avp(USERAGENT) = $ua;
	$avp(CONTACT) = $ct;
	$avp(URI) = $ru;
	$avp(UURI) = $rU;
	$avp(CSEQ) = $cs;
	$avp(PROTOCOL) = $pr;
	$avp(SOURCEIP) = $si;
	$avp(SOURCEPORT) = $sp;
	$avp(DESTIP) = $Ri;
	$avp(DESTPORT) = $Rp;
	$avp(FROMUSER) = $fU;
	$avp(TOUSER) = $tU;
	$avp(DOMAIN) = "host.domain.ru";

	if (is_method("REGISTER"))
	{		
		lua_exec ("core");

		if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => REGISTER LOOP ==> (FUSER=$fu)\n");
                        exit;
                }

		if ($avp(SIPPING) == "YES")
                {
                        xlog("lua => REGISTER SIP_PING_FLAG ==> (FUSER=$fu)\n");
                        setbflag(SIP_PING_FLAG);
                }

                if ($avp(NAT) == "YES")
                {
                        xlog("lua => REGISTER NAT_FLAG ==> (FUSER=$fu)\n");
                        setbflag(NAT_FLAG);
                }

		if ($avp(REGISTERED) == "YES")
		{		
			if (!save("location"))
			{
				sl_reply_error();
				xlog("lua => ERROR SAVE REGISTER\n");
				exit;
			} else {
					xlog("lua => Успешная регистрация терминала: 200 ОК\n");
				}
		}
		exit;	
	}

	if (is_method("INVITE"))
	{
		if (has_totag())
		{
			xlog("lua => Re-INVITE ==> (FUSER=$fu)\n");
			lua_exec ("core","Re-INVITE");
			route(relay);
			exit;
		}

		lua_exec ("core");

		if ($avp(DISCONTINUE) == "LOOP")
		{
			xlog("lua => INVITE LOOP ==> (FUSER=$fu)\n");
			exit;
		}

		if ($avp(SIPPING) == "YES")
		{
			xlog("lua => INVITE SIP_PING_FLAG ==> (FUSER=$fu)\n");
			setbflag(SIP_PING_FLAG);
		}

		if ($avp(NATB) == "YES")
                {
                        xlog("lua => INVITE NAT_BFLAG ==> (FUSER=$fu)\n");
                        setflag(NAT_BFLAG);
                }

		route(relay);
		exit;
        }

	if (is_method("ACK"))
        {
                lua_exec ("core");

		if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => ACK LOOP ==> (FUSER=$fu)\n");
                        exit;
                }

                route(relay);
                exit;
        }

	if (is_method("PRACK"))
        {
                lua_exec ("core");

                if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => PRACK LOOP ==> (FUSER=$fu)\n");
                        exit;
                }

                route(relay);
                exit;
        }

	if (is_method("BYE"))
        {
                lua_exec ("core");

		if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => BYE LOOP ==> (FUSER=$fu)\n");
                        exit;
                }

                route(relay);
                exit;
        }

	if (is_method("CANCEL"))
        {
                lua_exec ("core");

		if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => CANCEL LOOP ==> (FUSER=$fu)\n");
                        exit;
                }

                route(relay);
                exit;
        }

	if (is_method("OPTIONS"))
        {
                lua_exec ("core");

		if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => OPTIONS LOOP ==> (FUSER=$fu)\n");
                        exit;
                }

                exit;
        }
	
	if (is_method("NOTIFY"))
        {
		if (has_totag())
                {
                        xlog("lua => Refer-NOTIFY ==> (FUSER=$fu)\n");
                        lua_exec ("core","Refer-NOTIFY");
                        route(relay);
                        exit;
                }

		if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => NOTIFY LOOP ==> (FUSER=$fu)\n");
                        exit;
                }		

                lua_exec ("core","send");
                exit;
        }

	if (is_method("NOTIFY") && $hdr(Event)=="keep-alive")
	{
		lua_exec ("core","keep-alive");

		if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => NOTIFY keep-alive LOOP ==> (FUSER=$fu)\n");
                        exit;
                }

		exit;
	}

	if (is_method("PUBLISH"))
        {
                lua_exec ("core");

		if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => PUBLISH LOOP ==> (FUSER=$fu)\n");
                        exit;
                }

                exit;
        }

	if (is_method("SUBSCRIBE"))
        {
                lua_exec ("core");

		if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => SUBSCRIBE LOOP ==> (FUSER=$fu)\n");
                        exit;
                }

                exit;
        }

	if (is_method("MESSAGE"))
        {
                lua_exec ("core");

		if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => MESSAGE LOOP ==> (FUSER=$fu)\n");
                        exit;
                }

                exit;
        }

        if (is_method("REFER"))
        {
                lua_exec ("core");

                if ($avp(DISCONTINUE) == "LOOP")
                {
                        xlog("lua => REFER LOOP ==> (FUSER=$fu)\n");
                        exit;
                }

                route(relay);
                exit;
        }
}

route[relay]
{
	if (is_method("INVITE"))
	{
		xlog("lua => INVITE ==> (FUSER=$fu)\n");
		
		t_on_branch("invitebranch");
                t_on_reply("invitereply");
                t_on_failure("invitefail");

		$fs="udp:"+$avp(SOCKET);
		xlog("TEST => TEST ==> $avp(SERVICEID)\n");
		xlog("TEST => TEST ==> $avp(UURI)\n");
		if ($avp(INCOMING) == "YES")
		{
			$ru="sip:"+$avp(SERVICEID)+$avp(TOUSER)+"@"+$avp(DOMAIN);
		}
		t_relay();
        }

	if (is_method("ACK"))
        {		
		xlog("lua => ACK ==> (FUSER=$fu)\n");
		$fs="udp:"+$avp(SOCKET);
		t_relay();
		
	}		

	if (is_method("PRACK"))
        {
                xlog("lua => PRACK ==> (FUSER=$fu)\n");
		$fs="udp:"+$avp(SOCKET);
                t_relay();

        }

	if (is_method("BYE"))
        {
                xlog("lua => BYE ==> (FUSER=$fu)\n");

		t_on_branch("byebranch");
                t_on_reply("byereply");
                t_on_failure("byefail");

		$fs="udp:"+$avp(SOCKET);
                t_relay();

        }

	if (is_method("CANCEL"))
        {
                xlog("lua => CANCEL ==> (FUSER=$fu)\n");

		t_on_branch("cancelbranch");
                t_on_reply("cancelreply");
                t_on_failure("cancelfail");

		$fs="udp:"+$avp(SOCKET);
                t_relay();

        }

	if (is_method("REFER"))
        {
                xlog("lua => REFER ==> (FUSER=$fu)\n");

		t_on_branch("referbranch");
                t_on_reply("referreply");
                t_on_failure("referfail");

		$fs="udp:"+$avp(SOCKET);
                t_relay();

        }

	if (is_method("NOTIFY"))
        {
                xlog("lua => NOTIFY ==> (FUSER=$fu)\n");

		t_on_branch("notifybranch");
                t_on_reply("notifyreply");
                t_on_failure("notifyfail");

		$fs="udp:"+$avp(SOCKET);
                t_relay();

        }

}

branch_route[invitebranch]
{
	xlog("branch_route_invite \n");
}

onreply_route[invitereply]
{
	if (isflagset(NAT_BFLAG) || isbflagset(NAT_FLAG))
	{
		fix_nated_contact();
	}

	if (is_method ("INVITE"))
	{
		if (t_check_status ("180"))
		{
			xlog("lua => 180 RINGING - INVITE ==> (FUSER=$fu)\n");
			lua_exec ("core","180 RINGING");
			exit;
		}

		if (t_check_status ("181"))
                {
                        xlog("lua => 181 CALL IS BEING FORWARDED - INVITE ==> (FUSER=$fu)\n");
                        lua_exec ("core","181 CALL IS BEING FORWARDED");
                        exit;
                }		

		if (t_check_status ("182"))
                {
                        xlog("lua => 182 CALL IS QUEUED - INVITE ==> (FUSER=$fu)\n");
                        lua_exec ("core","182 CALL IS QUEUED");
                        exit;
                }		

		if (t_check_status ("183"))
		{
			xlog("lua => 183 SESSION PROGRESS - INVITE ==> (FUSER=$fu)\n");
			lua_exec ("core","183 SESSION PROGRESS");
			exit;
		}
		
		if (t_check_status ("200") && $hdr(Content-Type)=="application/sdp")
		{
			xlog("lua => 200 OK SDP - INVITE ==> (FUSER=$fu)\n");
			lua_exec ("core","200 OK SDP");
			exit;
		}

		if (t_check_status ("202"))
                {
                        xlog("lua => 202 ACCEPTED - INVITE ==> (FUSER=$fu)\n");
                        lua_exec ("core","202 ACCEPTED");
                        exit;
                }

		if (t_check_status ("(3[0-9][0-9])"))
		{
			xlog("lua => 3XX REPLY - INVITE ==> (FUSER=$fu)\n");
			lua_exec ("core","3XX REPLY");
                        exit;
                }

		if (t_check_status ("401|407"))
		{
			xlog("lua => 401|407 REPLY - INVITE ==> (FUSER=$fu)\n");
			$avp(REPLYSOURCEIP) = $si;
			$avp(REPLYSOURCEPORT) = $sp;
			lua_exec ("core","401|407 REPLY");
			exit;
		}

		if (t_check_status ("(4[0-9][0-9])")) && (!t_check_status ("401|407"))
                {
                        xlog("lua => 4XX REPLY - INVITE ==> (FUSER=$fu)\n");
                        lua_exec ("core","4XX REPLY");
                        exit;
                }

		if (t_check_status ("(5[0-9][0-9])"))
                {
                        xlog("lua => 5XX REPLY - INVITE ==> (FUSER=$fu)\n");
                        lua_exec ("core","5XX REPLY");
                        exit;
                }

		if (t_check_status ("(6[0-9][0-9])"))
                {
                        xlog("lua => 6XX REPLY - INVITE ==> (FUSER=$fu)\n");
                        lua_exec ("core","6XX REPLY");
                        exit;
                }

	}

	xlog("onreply_route_invite \n");
}

failure_route[invitefail]
{
	if (t_check_status("401|407"))
	{
		xlog("lua => 401|407 FAIL - INVITE ==> (FUSER=$fu)\n");

		if (uac_auth())
		{
			xlog("lua => 401|407 REQUEST - INVITE ==> (FUSER=$fu)\n");
			$du="sip"+":"+$avp(IPSERVER)+":"+$avp(PORTSERVER);
			t_relay();
		}
		exit;
        }

	if (t_was_cancelled())
	{
		exit;
	}

	xlog("failure_route_invite \n");
}

branch_route[byebranch]
{
        xlog("branch_route_bye \n");
}

onreply_route[byereply]
{
	if (is_method ("BYE"))
        {
                if (t_check_status ("200"))
                {
                        xlog("lua => 200 OK - BYE ==> (FUSER=$fu)\n");
                        lua_exec ("core","200 OK");
			exit;
                }

		if (t_check_status ("(3[0-9][0-9])"))
                {
                        xlog("lua => 3XX REPLY - BYE ==> (FUSER=$fu)\n");
                        lua_exec ("core","3XX REPLY");
                        exit;
                }

                if (t_check_status ("(4[0-9][0-9])"))
                {
                        xlog("lua => 4XX REPLY - BYE ==> (FUSER=$fu)\n");
                        lua_exec ("core","4XX REPLY");
                        exit;
                }

                if (t_check_status ("(5[0-9][0-9])"))
                {
                        xlog("lua => 5XX REPLY - BYE ==> (FUSER=$fu)\n");
                        lua_exec ("core","5XX REPLY");
                        exit;
                }

                if (t_check_status ("(6[0-9][0-9])"))
                {
                        xlog("lua => 6XX REPLY - BYE ==> (FUSER=$fu)\n");
                        lua_exec ("core","6XX REPLY");
                        exit;
                }

        }

	xlog("onreply_route_bye \n");
}

failure_route[byefail]
{
        xlog("failure_route_bye \n");
}

branch_route[cancelbranch]
{
        xlog("branch_route_cancel \n");
}

onreply_route[cancelreply]
{
        if (is_method ("CANCEL"))
        {
                if (t_check_status ("200"))
                {
                        xlog("lua => 200 OK - CANCEL ==> (FUSER=$fu)\n");
                        lua_exec ("core","200 OK");
                        exit;
                }

		if (t_check_status ("(3[0-9][0-9])"))
                {
                        xlog("lua => 3XX REPLY - CANCEL ==> (FUSER=$fu)\n");
                        lua_exec ("core","3XX REPLY");
                        exit;
                }

                if (t_check_status ("(4[0-9][0-9])"))
                {
                        xlog("lua => 4XX REPLY - CANCEL ==> (FUSER=$fu)\n");
                        lua_exec ("core","4XX REPLY");
                        exit;
                }

                if (t_check_status ("(5[0-9][0-9])"))
                {
                        xlog("lua => 5XX REPLY - CANCEL ==> (FUSER=$fu)\n");
                        lua_exec ("core","5XX REPLY");
                        exit;
                }

                if (t_check_status ("(6[0-9][0-9])"))
                {
                        xlog("lua => 6XX REPLY - CANCEL ==> (FUSER=$fu)\n");
                        lua_exec ("core","6XX REPLY");
                        exit;
                }

        }

        xlog("onreply_route_cancel \n");
}

failure_route[cancelfail]
{
        xlog("failure_route_cancel \n");
}

branch_route[referbranch]
{
        xlog("branch_route_refer \n");
}

onreply_route[referreply]
{
        if (is_method ("REFER"))
        {
                if (t_check_status ("200"))
                {
                        xlog("lua => 200 OK - REFER ==> (FUSER=$fu)\n");
                        lua_exec ("core","200 OK");
                        exit;
                }

		if (t_check_status ("200") && $hdr(Content-Type)=="application/sdp")
                {
                        xlog("lua => 200 OK SDP - REFER ==> (FUSER=$fu)\n");
                        lua_exec ("core","200 OK SDP");
                        exit;
                }

		if (t_check_status ("202"))
                {
                        xlog("lua => 202 ACCEPTED - REFER ==> (FUSER=$fu)\n");
                        lua_exec ("core","202 ACCEPTED");
                        exit;
                }

                if (t_check_status ("(3[0-9][0-9])"))
                {
                        xlog("lua => 3XX REPLY - REFER ==> (FUSER=$fu)\n");
                        lua_exec ("core","3XX REPLY");
                        exit;
                }

                if (t_check_status ("(4[0-9][0-9])"))
                {
                        xlog("lua => 4XX REPLY - REFER ==> (FUSER=$fu)\n");
                        lua_exec ("core","4XX REPLY");
                        exit;
                }

                if (t_check_status ("(5[0-9][0-9])"))
                {
                        xlog("lua => 5XX REPLY - REFER ==> (FUSER=$fu)\n");
                        lua_exec ("core","5XX REPLY");
                        exit;
                }

                if (t_check_status ("(6[0-9][0-9])"))
                {
                        xlog("lua => 6XX REPLY - REFER ==> (FUSER=$fu)\n");
                        lua_exec ("core","6XX REPLY");
                        exit;
                }

        }

        xlog("onreply_route_refer \n");
}

failure_route[referfail]
{
        xlog("failure_route_refer \n");
}

branch_route[notifybranch]
{
        xlog("branch_route_notify \n");
}

onreply_route[notifyreply]
{
        if (is_method ("NOTIFY"))
        {
                if (t_check_status ("200"))
                {
                        xlog("lua => 200 OK - NOTIFY ==> (FUSER=$fu)\n");
                        lua_exec ("core","200 OK");
                        exit;
                }

                if (t_check_status ("202"))
                {
                        xlog("lua => 202 ACCEPTED - NOTIFY ==> (FUSER=$fu)\n");
                        lua_exec ("core","202 ACCEPTED");
                        exit;
                }

                if (t_check_status ("(3[0-9][0-9])"))
                {
                        xlog("lua => 3XX REPLY - NOTIFY ==> (FUSER=$fu)\n");
                        lua_exec ("core","3XX REPLY");
                        exit;
                }

                if (t_check_status ("(4[0-9][0-9])"))
                {
                        xlog("lua => 4XX REPLY - NOTIFY ==> (FUSER=$fu)\n");
                        lua_exec ("core","4XX REPLY");
                        exit;
                }

                if (t_check_status ("(5[0-9][0-9])"))
                {
                        xlog("lua => 5XX REPLY - NOTIFY ==> (FUSER=$fu)\n");
                        lua_exec ("core","5XX REPLY");
                        exit;
                }

                if (t_check_status ("(6[0-9][0-9])"))
                {
                        xlog("lua => 6XX REPLY - NOTIFY ==> (FUSER=$fu)\n");
                        lua_exec ("core","6XX REPLY");
                        exit;
                }

        }

        xlog("onreply_route_notify \n");
}

failure_route[notifyfail]
{
        xlog("failure_route_notify \n");
}

